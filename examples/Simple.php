<?php

// This file is generated by Composer
require_once '../vendor/autoload.php';

use \Databox\DataboxClient;
use \Databox\DataboxClientBuilder;
use \Databox\DataboxException;
use \Databox\DataboxBuilder;
use \Guzzle\Common\Exception\RuntimeException;
use \Exception;

//Instantiate the client bulder
$clientBuilder = new DataboxClientBuilder();
$client = $clientBuilder->setDataboxBaseUrl('https://dev.databox.com/')->setApiKey('4yot7fe2uhkwocw44kgwo048g8o8s8og')->build();
//The client builder extends Guzzle Client, so you can add Guzzle compatible event subscribers and plugins to it if you like


//Instantiate the builder
$builder = new DataboxBuilder();

//The addKpi method uses the accepts $key, $value, $date (in that order). Date should be a timestamp in the format Y-m-d\TH:i:s. Date may be NULL, in which case the current UTC time will be used.
$builder->addKpi("myKey", 123);
$builder->addKpi("myExtraKey", 300, "2013-07-30T22:53:00");

//You must provide uniqueURL and payload parameters. Payload can be any JSON string, but we reccommend you use our builder class.
try {
    //If no Exception is raised everything went through as it should've :)
    $returnedResult = $this->client->pushData($this->builder->getPayload(), '5m86ywhb04kk4cwc');
    echo $returnedResult;
} catch (DataboxException $e) {
    echo $e->getType();
    echo $e->getWebMessage();
    echo $e->getMessage();
} catch (RuntimeException $e) {
    echo $e->getMessage();
    echo $e->getCode();
} catch (Exception $e) {
    echo $e->getMessage();
} 

//You can reset the builder and reuse the same instance for pushing to a different custom app, if you want to.
$builder->reset();
$builder->addKpi("mySecondAppKey", 123);
$builder->addKpi("mySecondAppExtraKey", 300, "2013-07-30T22:53:00");

//Fetch the saved data log
$log = $client->getPushDataLog([
	'uniqueUrl' => '3rglns26g76sws04'
]);

echo $log;
